{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MMA 823 A1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/20yft/MMA-860-Final-Project/blob/main/MMA_823%20Assignment%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ka09ZKzjO1Z3"
      },
      "source": [
        "%matplotlib inline\n",
        "\n",
        "from pathlib import Path\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "import time\n",
        "import warnings\n",
        "from scipy.stats.mstats import winsorize\n",
        "from sklearn.metrics import f1_score as score #Scoring metric for the competition\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve, auc, roc_auc_score, classification_report, confusion_matrix, make_scorer\n",
        "\n",
        "import itertools\n",
        "import scipy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mzdS6clnYqVY"
      },
      "source": [
        "# DATA_DIR = Path('/MMA 823')\n",
        "df = pd.read_excel('/content/Bankruptcy_data_Final.xlsx')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "sIJ3XcpDlf4O",
        "outputId": "27f3aa35-2d97-4661-ab12-f8d8dde851a0"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.58</td>\n",
              "      <td>0.36</td>\n",
              "      <td>0.18</td>\n",
              "      <td>0.13</td>\n",
              "      <td>1.33</td>\n",
              "      <td>1.77</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.15</td>\n",
              "      <td>2.22</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.41</td>\n",
              "      <td>0.36</td>\n",
              "      <td>0.19</td>\n",
              "      <td>0.12</td>\n",
              "      <td>1.31</td>\n",
              "      <td>1.59</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.13</td>\n",
              "      <td>2.41</td>\n",
              "      <td>0.126319</td>\n",
              "      <td>0.014278</td>\n",
              "      <td>0.040179</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.31</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.13</td>\n",
              "      <td>0.08</td>\n",
              "      <td>1.03</td>\n",
              "      <td>1.55</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.56</td>\n",
              "      <td>0.368077</td>\n",
              "      <td>0.327909</td>\n",
              "      <td>0.566524</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.71</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.14</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.80</td>\n",
              "      <td>1.39</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.05</td>\n",
              "      <td>5.28</td>\n",
              "      <td>-0.020809</td>\n",
              "      <td>-0.118904</td>\n",
              "      <td>-0.095890</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.75</td>\n",
              "      <td>0.41</td>\n",
              "      <td>0.13</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1.30</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.04</td>\n",
              "      <td>8.68</td>\n",
              "      <td>0.233089</td>\n",
              "      <td>0.146807</td>\n",
              "      <td>0.053030</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "0  1.58       0.36           0.18  ...           NaN              NaN   0\n",
              "1  1.41       0.36           0.19  ...      0.014278         0.040179   0\n",
              "2  0.31       0.32           0.13  ...      0.327909         0.566524   0\n",
              "3  0.71       0.28           0.14  ...     -0.118904        -0.095890   0\n",
              "4  0.75       0.41           0.13  ...      0.146807         0.053030   0\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qvkQsccknqQz",
        "outputId": "e7e64f3b-0b96-496e-8a4b-87f6f9ac0d70"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(92872, 13)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "9JmmNxJ2q62z",
        "outputId": "e63a25c5-f819-46ea-aaf2-e72e38e0200a"
      },
      "source": [
        "df.describe().T"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>EPS</th>\n",
              "      <td>92867.0</td>\n",
              "      <td>-14.461355</td>\n",
              "      <td>2195.467288</td>\n",
              "      <td>-3.840000e+05</td>\n",
              "      <td>-0.140000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>1.530000</td>\n",
              "      <td>55339.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liquidity</th>\n",
              "      <td>92625.0</td>\n",
              "      <td>-2.631237</td>\n",
              "      <td>121.610921</td>\n",
              "      <td>-2.596852e+04</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.190000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Profitability</th>\n",
              "      <td>92625.0</td>\n",
              "      <td>-29.537274</td>\n",
              "      <td>677.230667</td>\n",
              "      <td>-7.968200e+04</td>\n",
              "      <td>-0.640000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.310000</td>\n",
              "      <td>140.58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Productivity</th>\n",
              "      <td>92625.0</td>\n",
              "      <td>-1.222870</td>\n",
              "      <td>35.885556</td>\n",
              "      <td>-5.093000e+03</td>\n",
              "      <td>-0.060000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.110000</td>\n",
              "      <td>1102.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <td>92846.0</td>\n",
              "      <td>1.345316</td>\n",
              "      <td>253.038093</td>\n",
              "      <td>-7.811000e+03</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.280000</td>\n",
              "      <td>0.820000</td>\n",
              "      <td>75970.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Asset Turnover</th>\n",
              "      <td>92625.0</td>\n",
              "      <td>1.053613</td>\n",
              "      <td>2.115945</td>\n",
              "      <td>-3.159000e+01</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>0.830000</td>\n",
              "      <td>1.390000</td>\n",
              "      <td>276.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operational Margin</th>\n",
              "      <td>87315.0</td>\n",
              "      <td>-7.915485</td>\n",
              "      <td>214.460079</td>\n",
              "      <td>-3.017570e+04</td>\n",
              "      <td>-0.030000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.140000</td>\n",
              "      <td>394.47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Return on Equity</th>\n",
              "      <td>92864.0</td>\n",
              "      <td>-2.112382</td>\n",
              "      <td>352.596902</td>\n",
              "      <td>-8.887514e+04</td>\n",
              "      <td>-0.080000</td>\n",
              "      <td>0.030000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>39500.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <td>92815.0</td>\n",
              "      <td>358.506265</td>\n",
              "      <td>26063.637981</td>\n",
              "      <td>-3.151500e+06</td>\n",
              "      <td>11.200000</td>\n",
              "      <td>58.280000</td>\n",
              "      <td>240.140000</td>\n",
              "      <td>3455419.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Assets Growth</th>\n",
              "      <td>86171.0</td>\n",
              "      <td>1.294075</td>\n",
              "      <td>73.769522</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>-0.052596</td>\n",
              "      <td>0.051844</td>\n",
              "      <td>0.192062</td>\n",
              "      <td>14231.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales Growth</th>\n",
              "      <td>86171.0</td>\n",
              "      <td>1.900108</td>\n",
              "      <td>177.632638</td>\n",
              "      <td>-2.743103e+01</td>\n",
              "      <td>-0.033522</td>\n",
              "      <td>0.059733</td>\n",
              "      <td>0.204231</td>\n",
              "      <td>39850.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Employee Growth</th>\n",
              "      <td>85862.0</td>\n",
              "      <td>0.343322</td>\n",
              "      <td>14.074156</td>\n",
              "      <td>-1.000000e+00</td>\n",
              "      <td>-0.048107</td>\n",
              "      <td>0.017241</td>\n",
              "      <td>0.130944</td>\n",
              "      <td>2699.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BK</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.006008</td>\n",
              "      <td>0.077280</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      count        mean  ...         75%         max\n",
              "EPS                 92867.0  -14.461355  ...    1.530000    55339.00\n",
              "Liquidity           92625.0   -2.631237  ...    0.400000        1.00\n",
              "Profitability       92625.0  -29.537274  ...    0.310000      140.58\n",
              "Productivity        92625.0   -1.222870  ...    0.110000     1102.00\n",
              "Leverage Ratio      92846.0    1.345316  ...    0.820000    75970.38\n",
              "Asset Turnover      92625.0    1.053613  ...    1.390000      276.38\n",
              "Operational Margin  87315.0   -7.915485  ...    0.140000      394.47\n",
              "Return on Equity    92864.0   -2.112382  ...    0.070000    39500.00\n",
              "Market Book Ratio   92815.0  358.506265  ...  240.140000  3455419.33\n",
              "Assets Growth       86171.0    1.294075  ...    0.192062    14231.00\n",
              "Sales Growth        86171.0    1.900108  ...    0.204231    39850.00\n",
              "Employee Growth     85862.0    0.343322  ...    0.130944     2699.00\n",
              "BK                  92872.0    0.006008  ...    0.000000        1.00\n",
              "\n",
              "[13 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "QGlAovwBrU-_",
        "outputId": "aab9c95c-9218-4eca-a8a1-9d766b085172"
      },
      "source": [
        "df[df['EPS']==55339].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18279</th>\n",
              "      <td>55339.0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.15</td>\n",
              "      <td>14.79</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0.17</td>\n",
              "      <td>813.81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.575813</td>\n",
              "      <td>0.068859</td>\n",
              "      <td>-0.210938</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "18279  55339.0        0.1            0.0  ...      0.068859        -0.210938   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "0-qJcYY1rtUg",
        "outputId": "98ad78b2-2c39-4fbd-e619-9a1a73e893c5"
      },
      "source": [
        "df[df[\"Liquidity\"]==1].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10175</th>\n",
              "      <td>-0.02</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-26.29</td>\n",
              "      <td>-0.21</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.09</td>\n",
              "      <td>8.38</td>\n",
              "      <td>6.837209</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14676</th>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-2711.00</td>\n",
              "      <td>-1.33</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>19309.59</td>\n",
              "      <td>-0.998835</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17108</th>\n",
              "      <td>0.06</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.14</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.32</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.04</td>\n",
              "      <td>62.16</td>\n",
              "      <td>-0.209674</td>\n",
              "      <td>-0.880775</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17109</th>\n",
              "      <td>-0.01</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>-0.12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>94.76</td>\n",
              "      <td>-0.045705</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17110</th>\n",
              "      <td>-0.01</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>-0.12</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.00</td>\n",
              "      <td>143.42</td>\n",
              "      <td>-0.050096</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34493</th>\n",
              "      <td>0.05</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.02</td>\n",
              "      <td>4.31</td>\n",
              "      <td>0.015714</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43022</th>\n",
              "      <td>-0.02</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.58</td>\n",
              "      <td>-0.28</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.33</td>\n",
              "      <td>28.65</td>\n",
              "      <td>-0.246804</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43023</th>\n",
              "      <td>-0.02</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-2.44</td>\n",
              "      <td>-0.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.33</td>\n",
              "      <td>34.83</td>\n",
              "      <td>-0.243473</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43073</th>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-72.00</td>\n",
              "      <td>-2.67</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>605.29</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43074</th>\n",
              "      <td>-0.01</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-228.00</td>\n",
              "      <td>-12.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>2030.00</td>\n",
              "      <td>-0.666667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "10175 -0.02        1.0         -26.29  ...      0.000000              0.0   0\n",
              "14676  0.00        1.0       -2711.00  ...     -1.000000             -1.0   0\n",
              "17108  0.06        1.0           1.00  ...     -0.880775              0.0   0\n",
              "17109 -0.01        1.0           1.00  ...     -1.000000              0.0   0\n",
              "17110 -0.01        1.0           1.00  ...      0.000000              0.0   0\n",
              "34493  0.05        1.0           0.00  ...      0.000000              0.0   0\n",
              "43022 -0.02        1.0          -1.58  ...      0.000000              0.0   0\n",
              "43023 -0.02        1.0          -2.44  ...      0.000000              0.0   0\n",
              "43073  0.00        1.0         -72.00  ...           NaN              NaN   0\n",
              "43074 -0.01        1.0        -228.00  ...      0.000000              0.0   0\n",
              "\n",
              "[10 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "Up1mwbZzr5cF",
        "outputId": "4651e7bb-20cd-41e4-a5ed-74091533dc69"
      },
      "source": [
        "df[df[\"Profitability\"]==140.58].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>54186</th>\n",
              "      <td>-0.44</td>\n",
              "      <td>-2.15</td>\n",
              "      <td>140.58</td>\n",
              "      <td>-0.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.51</td>\n",
              "      <td>-1.38</td>\n",
              "      <td>-364.33</td>\n",
              "      <td>-0.29</td>\n",
              "      <td>-0.814736</td>\n",
              "      <td>-0.880495</td>\n",
              "      <td>-0.893617</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "54186 -0.44      -2.15         140.58  ...     -0.880495        -0.893617   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "5Ma-4o_9sBKK",
        "outputId": "d257080d-6d1d-46ae-d27d-8fc3b4acbe79"
      },
      "source": [
        "df[df[\"Productivity\"]==1102].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>84310</th>\n",
              "      <td>0.01</td>\n",
              "      <td>-142.0</td>\n",
              "      <td>-5005.0</td>\n",
              "      <td>1102.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.49</td>\n",
              "      <td>-1306.07</td>\n",
              "      <td>-0.996441</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.75</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "84310  0.01     -142.0        -5005.0  ...           0.0            -0.75   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "sMFtiJJcsG9q",
        "outputId": "4be2f613-59f5-498b-f2d9-e5603b39cd3e"
      },
      "source": [
        "df[df[\"Leverage Ratio\"]>7500].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>69848</th>\n",
              "      <td>-6.03</td>\n",
              "      <td>0.03</td>\n",
              "      <td>-0.38</td>\n",
              "      <td>0.06</td>\n",
              "      <td>75970.38</td>\n",
              "      <td>0.49</td>\n",
              "      <td>0.13</td>\n",
              "      <td>-3.27</td>\n",
              "      <td>188569.33</td>\n",
              "      <td>-0.221731</td>\n",
              "      <td>0.035646</td>\n",
              "      <td>-0.055651</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "69848 -6.03       0.03          -0.38  ...      0.035646        -0.055651   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "YB-KjL5zsbhu",
        "outputId": "44182c3a-2e7b-490b-c607-1e66c7f06e2d"
      },
      "source": [
        "df[df[\"Asset Turnover\"]>250].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>73717</th>\n",
              "      <td>-0.07</td>\n",
              "      <td>-53.52</td>\n",
              "      <td>-880.59</td>\n",
              "      <td>-16.1</td>\n",
              "      <td>-0.13</td>\n",
              "      <td>276.38</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>-8.21</td>\n",
              "      <td>-0.78</td>\n",
              "      <td>-0.9948</td>\n",
              "      <td>-0.475527</td>\n",
              "      <td>-0.992308</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "73717 -0.07     -53.52        -880.59  ...     -0.475527        -0.992308   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "KUK3_Kh3skWE",
        "outputId": "21fd53eb-9d3b-42e1-ae9b-494e64b9f4a0"
      },
      "source": [
        "df[df[\"Operational Margin\"]>300].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>63270</th>\n",
              "      <td>-0.12</td>\n",
              "      <td>0.46</td>\n",
              "      <td>-8.17</td>\n",
              "      <td>-0.85</td>\n",
              "      <td>0.07</td>\n",
              "      <td>0.0</td>\n",
              "      <td>394.47</td>\n",
              "      <td>-0.33</td>\n",
              "      <td>189.44</td>\n",
              "      <td>0.491029</td>\n",
              "      <td>-1.387755</td>\n",
              "      <td>3.818182</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "63270 -0.12       0.46          -8.17  ...     -1.387755         3.818182   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "tdED2D06sqXR",
        "outputId": "f73ce000-a6ed-4624-e2e5-315462d18718"
      },
      "source": [
        "df[df[\"Return on Equity\"]>35000].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>54187</th>\n",
              "      <td>59.25</td>\n",
              "      <td>0.47</td>\n",
              "      <td>-2.51</td>\n",
              "      <td>-5.11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39500.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.946877</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "54187  59.25       0.47          -2.51  ...          -1.0             -1.0   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "YMUYL0bQs60U",
        "outputId": "f27cffc1-2a50-4dba-b53e-e330c027d09e"
      },
      "source": [
        "df[df[\"Assets Growth\"]>12000].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>86119</th>\n",
              "      <td>-0.15</td>\n",
              "      <td>0.54</td>\n",
              "      <td>-0.17</td>\n",
              "      <td>-0.11</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0.15</td>\n",
              "      <td>-0.75</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>832.76</td>\n",
              "      <td>14231.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "86119 -0.15       0.54          -0.17  ...           0.0              0.6   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 111
        },
        "id": "friHAo3YtBuo",
        "outputId": "ae95cb4c-faa8-4889-c26f-d64a071efd95"
      },
      "source": [
        "df[df[\"Sales Growth\"]>12000].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>48101</th>\n",
              "      <td>-0.2</td>\n",
              "      <td>0.13</td>\n",
              "      <td>-0.22</td>\n",
              "      <td>-0.15</td>\n",
              "      <td>0.18</td>\n",
              "      <td>0.35</td>\n",
              "      <td>-0.42</td>\n",
              "      <td>-0.21</td>\n",
              "      <td>152.40</td>\n",
              "      <td>100.238759</td>\n",
              "      <td>39850.0</td>\n",
              "      <td>414.666667</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69011</th>\n",
              "      <td>-0.1</td>\n",
              "      <td>0.20</td>\n",
              "      <td>-0.35</td>\n",
              "      <td>0.25</td>\n",
              "      <td>0.49</td>\n",
              "      <td>2.75</td>\n",
              "      <td>0.09</td>\n",
              "      <td>-0.04</td>\n",
              "      <td>2067.09</td>\n",
              "      <td>2440.777778</td>\n",
              "      <td>30245.0</td>\n",
              "      <td>37.500000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "48101 -0.2       0.13          -0.22  ...       39850.0       414.666667   0\n",
              "69011 -0.1       0.20          -0.35  ...       30245.0        37.500000   0\n",
              "\n",
              "[2 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "VcDrWxZztJW4",
        "outputId": "16b59900-a75f-4599-8c1f-cf92c6018587"
      },
      "source": [
        "df[df[\"Employee Growth\"]>2000].head(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EPS</th>\n",
              "      <th>Liquidity</th>\n",
              "      <th>Profitability</th>\n",
              "      <th>Productivity</th>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <th>Asset Turnover</th>\n",
              "      <th>Operational Margin</th>\n",
              "      <th>Return on Equity</th>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <th>Assets Growth</th>\n",
              "      <th>Sales Growth</th>\n",
              "      <th>Employee Growth</th>\n",
              "      <th>BK</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>78061</th>\n",
              "      <td>1.92</td>\n",
              "      <td>0.05</td>\n",
              "      <td>-0.11</td>\n",
              "      <td>0.06</td>\n",
              "      <td>3.07</td>\n",
              "      <td>0.12</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.12</td>\n",
              "      <td>52.31</td>\n",
              "      <td>0.037288</td>\n",
              "      <td>0.168286</td>\n",
              "      <td>2699.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        EPS  Liquidity  Profitability  ...  Sales Growth  Employee Growth  BK\n",
              "78061  1.92       0.05          -0.11  ...      0.168286           2699.0   0\n",
              "\n",
              "[1 rows x 13 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1d_7HwiXsWxX"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7lHg38LVDY6u",
        "outputId": "958bfafb-efbc-40ec-c583-6a1757150daa"
      },
      "source": [
        "df.isnull().sum()/len(df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EPS                   0.000054\n",
              "Liquidity             0.002660\n",
              "Profitability         0.002660\n",
              "Productivity          0.002660\n",
              "Leverage Ratio        0.000280\n",
              "Asset Turnover        0.002660\n",
              "Operational Margin    0.059835\n",
              "Return on Equity      0.000086\n",
              "Market Book Ratio     0.000614\n",
              "Assets Growth         0.072153\n",
              "Sales Growth          0.072153\n",
              "Employee Growth       0.075480\n",
              "BK                    0.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z1Ufm5Kok70p"
      },
      "source": [
        "EPS_mean = df['EPS'].mean()\n",
        "Liquidity_mean = df['Liquidity'].mean()\n",
        "Profitability_mean = df['Profitability'].mean()\n",
        "Productivity_mean = df['Productivity'].mean()\n",
        "Leverage_Ratio_mean = df['Leverage Ratio'].mean()\n",
        "Asset_Turnover_mean = df['Asset Turnover'].mean()\n",
        "Operational_Margin_mean = df['Operational Margin'].mean()\n",
        "Return_on_Equity_mean = df['Return on Equity'].mean()\n",
        "Market_Book_Ratio_mean = df['Market Book Ratio'].mean()\n",
        "Assets_Growth_mean = df['Assets Growth'].mean()\n",
        "Sales_Growth_mean = df['Sales Growth'].mean()\n",
        "Employee_Growth_mean = df['Employee Growth'].mean()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IyPEUtbFKN7s"
      },
      "source": [
        "Mean Imputation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0OwHs7IvFQoP"
      },
      "source": [
        "df['EPS'].fillna(EPS_mean,inplace=True)\n",
        "df['Liquidity'].fillna(Liquidity_mean,inplace=True)\n",
        "df['Profitability'].fillna(Profitability_mean,inplace=True)\n",
        "df['Productivity'].fillna(Productivity_mean,inplace=True)\n",
        "df['Leverage Ratio'].fillna(Leverage_Ratio_mean,inplace=True)\n",
        "df['Asset Turnover'].fillna(Asset_Turnover_mean,inplace=True)\n",
        "df['Operational Margin'].fillna(Operational_Margin_mean,inplace=True)\n",
        "df['Return on Equity'].fillna(Return_on_Equity_mean,inplace=True)\n",
        "df['Market Book Ratio'].fillna(Market_Book_Ratio_mean,inplace=True)\n",
        "df['Assets Growth'].fillna(Assets_Growth_mean,inplace=True)\n",
        "df['Sales Growth'].fillna(Sales_Growth_mean,inplace=True)\n",
        "df['Employee Growth'].fillna(Employee_Growth_mean,inplace=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQYyeQ0aFWkw",
        "outputId": "cbec02ae-a8e4-4a23-fcda-84a997a9f553"
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EPS                   0\n",
              "Liquidity             0\n",
              "Profitability         0\n",
              "Productivity          0\n",
              "Leverage Ratio        0\n",
              "Asset Turnover        0\n",
              "Operational Margin    0\n",
              "Return on Equity      0\n",
              "Market Book Ratio     0\n",
              "Assets Growth         0\n",
              "Sales Growth          0\n",
              "Employee Growth       0\n",
              "BK                    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kbvTYUoAKxnC"
      },
      "source": [
        "EDA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8kWee_00IcAf",
        "outputId": "05f9bb83-2976-47a9-bf28-0004a63d3a19"
      },
      "source": [
        "df['BK'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    92314\n",
              "1      558\n",
              "Name: BK, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "oQ7xIHyHK-37",
        "outputId": "0661f6dc-b587-455a-c392-888914264bc3"
      },
      "source": [
        "sns.countplot(x=df['BK'])\n",
        "plt.title('Target feature - Bankrupt')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Target feature - Bankrupt')"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yXbCltRcgjKq"
      },
      "source": [
        "Dealing With Outliers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBib4idpghPi"
      },
      "source": [
        "def rm_outliers(df, var):\n",
        "    FQ = df[var].quantile(.25)\n",
        "    TQ = df[var].quantile(.75)\n",
        "    iqr = TQ-FQ\n",
        "    h = 3*iqr\n",
        "    df.loc[df[var] > TQ+h, var] = TQ+h\n",
        "    df.loc[df[var] < FQ-h, var] = FQ-h"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t0S77fjvuzc3"
      },
      "source": [
        "rm_outliers(df,'EPS')\n",
        "rm_outliers(df,'Liquidity')\n",
        "rm_outliers(df,'Profitability')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iWO0pc22vCtz"
      },
      "source": [
        "rm_outliers(df,'Productivity')\n",
        "rm_outliers(df,'Leverage Ratio')\n",
        "rm_outliers(df,'Asset Turnover')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dt1Qc-9wvJD5"
      },
      "source": [
        "rm_outliers(df,'Operational Margin')\n",
        "rm_outliers(df,'Return on Equity')\n",
        "rm_outliers(df,'Assets Growth')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Z_UyX1gvPqq"
      },
      "source": [
        "rm_outliers(df,'Sales Growth')\n",
        "rm_outliers(df,'Employee Growth')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "tsZRAScjvWwt",
        "outputId": "b1f79d92-1a75-4235-8d60-b156d58af483"
      },
      "source": [
        "df.describe().T"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>EPS</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.709711</td>\n",
              "      <td>1.893951</td>\n",
              "      <td>-5.150000e+00</td>\n",
              "      <td>-0.140000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>1.530000</td>\n",
              "      <td>6.540000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Liquidity</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.177331</td>\n",
              "      <td>0.380924</td>\n",
              "      <td>-1.120000e+00</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.190000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Profitability</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>-0.494854</td>\n",
              "      <td>1.324652</td>\n",
              "      <td>-3.530000e+00</td>\n",
              "      <td>-0.650000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.310000</td>\n",
              "      <td>3.190000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Productivity</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>-0.017948</td>\n",
              "      <td>0.232590</td>\n",
              "      <td>-5.700000e-01</td>\n",
              "      <td>-0.060000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.110000</td>\n",
              "      <td>6.200000e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Leverage Ratio</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.491598</td>\n",
              "      <td>0.993838</td>\n",
              "      <td>-2.460000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.280000</td>\n",
              "      <td>0.820000</td>\n",
              "      <td>3.280000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Asset Turnover</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>1.003053</td>\n",
              "      <td>0.853034</td>\n",
              "      <td>-2.580000e+00</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>0.830000</td>\n",
              "      <td>1.380000</td>\n",
              "      <td>4.350000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operational Margin</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>-0.070989</td>\n",
              "      <td>0.358347</td>\n",
              "      <td>-7.900000e-01</td>\n",
              "      <td>-0.100000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.130000</td>\n",
              "      <td>8.200000e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Return on Equity</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>-0.038006</td>\n",
              "      <td>0.200839</td>\n",
              "      <td>-5.300000e-01</td>\n",
              "      <td>-0.080000</td>\n",
              "      <td>0.030000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>5.200000e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Market Book Ratio</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>358.506265</td>\n",
              "      <td>26055.638415</td>\n",
              "      <td>-3.151500e+06</td>\n",
              "      <td>11.220000</td>\n",
              "      <td>58.380000</td>\n",
              "      <td>240.985000</td>\n",
              "      <td>3.455419e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Assets Growth</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.185111</td>\n",
              "      <td>0.445785</td>\n",
              "      <td>-9.567178e-01</td>\n",
              "      <td>-0.041112</td>\n",
              "      <td>0.067076</td>\n",
              "      <td>0.264090</td>\n",
              "      <td>1.179695e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales Growth</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.183516</td>\n",
              "      <td>0.441091</td>\n",
              "      <td>-9.063041e-01</td>\n",
              "      <td>-0.021171</td>\n",
              "      <td>0.076081</td>\n",
              "      <td>0.273874</td>\n",
              "      <td>1.159007e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Employee Growth</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.080875</td>\n",
              "      <td>0.273862</td>\n",
              "      <td>-7.297407e-01</td>\n",
              "      <td>-0.038836</td>\n",
              "      <td>0.030611</td>\n",
              "      <td>0.191466</td>\n",
              "      <td>8.823709e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BK</th>\n",
              "      <td>92872.0</td>\n",
              "      <td>0.006008</td>\n",
              "      <td>0.077280</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      count        mean  ...         75%           max\n",
              "EPS                 92872.0    0.709711  ...    1.530000  6.540000e+00\n",
              "Liquidity           92872.0    0.177331  ...    0.400000  1.000000e+00\n",
              "Profitability       92872.0   -0.494854  ...    0.310000  3.190000e+00\n",
              "Productivity        92872.0   -0.017948  ...    0.110000  6.200000e-01\n",
              "Leverage Ratio      92872.0    0.491598  ...    0.820000  3.280000e+00\n",
              "Asset Turnover      92872.0    1.003053  ...    1.380000  4.350000e+00\n",
              "Operational Margin  92872.0   -0.070989  ...    0.130000  8.200000e-01\n",
              "Return on Equity    92872.0   -0.038006  ...    0.070000  5.200000e-01\n",
              "Market Book Ratio   92872.0  358.506265  ...  240.985000  3.455419e+06\n",
              "Assets Growth       92872.0    0.185111  ...    0.264090  1.179695e+00\n",
              "Sales Growth        92872.0    0.183516  ...    0.273874  1.159007e+00\n",
              "Employee Growth     92872.0    0.080875  ...    0.191466  8.823709e-01\n",
              "BK                  92872.0    0.006008  ...    0.000000  1.000000e+00\n",
              "\n",
              "[13 rows x 8 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZmlakXmOOW0u"
      },
      "source": [
        "Standardize the independent Variable"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hWuks7BbOGEI"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler=StandardScaler()\n",
        "X_scale=scaler.fit_transform(X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eSIBZyD4RnpF"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scale, y,test_size=0.3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "etkH07lJNpGi"
      },
      "source": [
        "Oversampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u6L24xpuLLLh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b8ac9e8c-9c1a-4fe5-c709-59eca6baa34a"
      },
      "source": [
        "from imblearn.over_sampling import SMOTE"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
            "  \"(https://pypi.org/project/six/).\", FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sbse2wiFNu-T"
      },
      "source": [
        "X=df.drop(labels=['BK'], axis=1)\n",
        "y=df['BK']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VVMC_K3GN-3r",
        "outputId": "6d891f0f-f649-48a8-d980-29bbeff29a7b"
      },
      "source": [
        "oversample = SMOTE()\n",
        "X_train,y_train=oversample.fit_resample(X_train,y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "id": "c-awXE2pODkx",
        "outputId": "010af65a-e2fc-40a5-8f27-c7d937f36018"
      },
      "source": [
        "sns.countplot(X_train=y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-6f4df037cba2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mcountplot\u001b[0;34m(x, y, hue, data, order, hue_order, orient, color, palette, saturation, dodge, ax, **kwargs)\u001b[0m\n\u001b[1;32m   3608\u001b[0m         \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3610\u001b[0;31m     \u001b[0mplotter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3611\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, ax, bar_kws)\u001b[0m\n\u001b[1;32m   1637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbar_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1638\u001b[0m         \u001b[0;34m\"\"\"Make the plot.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1639\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_bars\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbar_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1640\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mannotate_axes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1641\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0morient\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"h\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mdraw_bars\u001b[0;34m(self, ax, kws)\u001b[0m\n\u001b[1;32m   1603\u001b[0m             \u001b[0;31m# Draw the bars\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m             barfunc(barpos, self.statistic, self.width,\n\u001b[0;32m-> 1605\u001b[0;31m                     color=self.colors, align=\"center\", **kws)\n\u001b[0m\u001b[1;32m   1606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1607\u001b[0m             \u001b[0;31m# Draw the confidence intervals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mbar\u001b[0;34m(self, x, height, width, bottom, align, **kwargs)\u001b[0m\n\u001b[1;32m   2396\u001b[0m                 \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'_nolegend_'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2397\u001b[0m                 )\n\u001b[0;32m-> 2398\u001b[0;31m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2399\u001b[0m             \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_interpolation_steps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2400\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0morientation\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'vertical'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meventson\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1006\u001b[0;31m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_update_property\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1007\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_update_property\u001b[0;34m(self, k, v)\u001b[0m\n\u001b[1;32m   1000\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1001\u001b[0m                     raise AttributeError('{!r} object has no property {!r}'\n\u001b[0;32m-> 1002\u001b[0;31m                                          .format(type(self).__name__, k))\n\u001b[0m\u001b[1;32m   1003\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Rectangle' object has no property 'x_train'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9uW-oTJiRzWO"
      },
      "source": [
        "Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxEfK2SSRyX2",
        "outputId": "eb854530-c1a1-4b4d-b335-83c3326c5260"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "log_reg=LogisticRegression()\n",
        "log_reg.fit(X_train,y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T3_Jl6tCSlCP",
        "outputId": "39368e87-2965-4e18-f12b-d9bdd51c9d93"
      },
      "source": [
        "log_reg.score(X_test,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8354389491063097"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OEj2ey00Szjr"
      },
      "source": [
        "y_pred=log_reg.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "deeqrmGZS2JP"
      },
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, recall_score, precision_score, roc_auc_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ElxwKk6S4hO",
        "outputId": "1b9d0bad-7308-4f90-ce34-f65aefa1a2f5"
      },
      "source": [
        "accuracy_score(y_test,y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8141688782971348"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MwmDXQUjCl8s",
        "outputId": "b17d1c02-7a1f-42ef-a5b7-75996136f8eb"
      },
      "source": [
        "print(classification_report(y_test, y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.84      0.91     27705\n",
            "           1       0.03      0.76      0.05       157\n",
            "\n",
            "    accuracy                           0.84     27862\n",
            "   macro avg       0.51      0.80      0.48     27862\n",
            "weighted avg       0.99      0.84      0.91     27862\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yq83RCmUS6Oh",
        "outputId": "4357bd09-bcf5-437e-8990-0bde8626308b"
      },
      "source": [
        "print(\"Accuracy:\",accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",recall_score(y_test, y_pred))\n",
        "print(\"F1 Macro Score = {:.2f}\".format(f1_score(y_test, y_pred, average = 'macro')))\n",
        "print(\"AUC: \" + str(roc_auc_score(y_test, y_pred)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8354389491063097\n",
            "Precision: 0.02570694087403599\n",
            "Recall: 0.7643312101910829\n",
            "F1 Macro Score = 0.48\n",
            "AUC: 0.8000865579921304\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cHEuNKZMS9rZ",
        "outputId": "df703e6f-0b1b-4398-d53e-e771a60dc278"
      },
      "source": [
        "confusion_matrix(y_test,y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[23157,  4548],\n",
              "       [   37,   120]])"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bazR6gcGagw-",
        "outputId": "9ec1d2e2-d43e-4777-e146-00ebd880245a"
      },
      "source": [
        "importance=log_reg.coef_\n",
        "importance\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.49091662, -0.47978385,  0.30804717, -0.53125445,  0.12016892,\n",
              "         0.43859859,  0.17880121, -0.58778949,  0.00877288, -0.03194681,\n",
              "        -0.20182454,  0.22571041]])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "VSG2W_xrbJZ_",
        "outputId": "9d9b424b-d1a1-4648-e308-02e8313ed6ef"
      },
      "source": [
        "from pandas import Series\n",
        "feature_importance=pd.Series([-0.56249814, -0.60160237,  0.26068011, -0.38746317,  0.28413245,\n",
        "         0.51094705,  0.02341327, -0.86352969,  0.01443124, -0.13878553,\n",
        "        -0.15139796,  0.22707004],index=['EPS', 'Liquidity', 'Profitability', 'Productivity', 'Leverage Ratio',\n",
        "       'Asset Turnover', 'Operational Margin', 'Return on Equity',\n",
        "       'Market Book Ratio', 'Assets Growth', 'Sales Growth', 'Employee Growth'])\n",
        "feature_importance.plot(kind=\"barh\",title=\"Feature Importance\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f923d83ba90>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8B5esPaXTS7l"
      },
      "source": [
        "Log Reg with Hyperparameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FhghPHAqTZE6",
        "outputId": "73a96a36-25b6-4870-f070-f8c415631909"
      },
      "source": [
        "log_regnew = LogisticRegression(solver='saga')\n",
        "\n",
        "params = {\"C\":np.logspace(-3,3,7), \"penalty\":[\"l1\",\"l2\"],\"class_weight\":['balanced'] }\n",
        "cv_lg = GridSearchCV(log_regnew, params, cv=5, n_jobs=-1, return_train_score=True, scoring='f1_macro', verbose=2)\n",
        "\n",
        "log_regnew = cv_lg.fit(X_train, y_train)\n",
        "print(log_regnew.best_score_)\n",
        "print(log_regnew.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 14 candidates, totalling 70 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:   50.9s\n",
            "[Parallel(n_jobs=-1)]: Done  70 out of  70 | elapsed:  1.6min finished\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.805474279319532\n",
            "{'C': 0.001, 'class_weight': 'balanced', 'penalty': 'l1'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sDt7b2eva7Gb",
        "outputId": "210a36f3-e666-4a31-e370-29842c0a4e4c"
      },
      "source": [
        "print(\"Best Score:\",log_regnew.best_score_)\n",
        "print(\"Best Parameters:\",log_regnew.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Score: 0.805474279319532\n",
            "Best Parameters: {'C': 0.001, 'class_weight': 'balanced', 'penalty': 'l1'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rAOo91SDIUpc"
      },
      "source": [
        "y_predh=log_regnew.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vvhgo6MII_h5",
        "outputId": "125f0fe9-a5ee-49dc-a9fc-47f439b81b27"
      },
      "source": [
        "print(classification_report(y_test, y_predh))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.84      0.91     27705\n",
            "           1       0.03      0.77      0.05       157\n",
            "\n",
            "    accuracy                           0.83     27862\n",
            "   macro avg       0.51      0.80      0.48     27862\n",
            "weighted avg       0.99      0.83      0.90     27862\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6UaIIf3rJGUw",
        "outputId": "fcffd778-f7a7-4289-9952-bb9d5459fa34"
      },
      "source": [
        "print(\"Accuracy:\",accuracy_score(y_test, y_predh))\n",
        "print(\"Precision:\",precision_score(y_test, y_predh))\n",
        "print(\"Recall:\",recall_score(y_test, y_predh))\n",
        "print(\"F1 Macro Score = {:.2f}\".format(f1_score(y_test, y_predh, average = 'macro')))\n",
        "print(\"AUC: \" + str(roc_auc_score(y_test, y_predh)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8347570167252889\n",
            "Precision: 0.02580507570910642\n",
            "Recall: 0.7707006369426752\n",
            "F1 Macro Score = 0.48\n",
            "AUC: 0.8029103256902512\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kG8zJXnOALJx",
        "outputId": "567d13af-9910-4d05-f237-05cb9c7db0f3"
      },
      "source": [
        "confusion_matrix(y_test,y_predh)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[23137,  4568],\n",
              "       [   36,   121]])"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3zkK05YDa6GL"
      },
      "source": [
        "Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e1UVhpUCj8wh",
        "outputId": "07c5a771-248a-462a-d33e-696733e2175f"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "\n",
        "rf= RandomForestClassifier(n_estimators=20)\n",
        "rf.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=20,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QMTQyi5Jk0FW",
        "outputId": "a1a05469-762d-4ccc-efac-eb83cc793290"
      },
      "source": [
        "rf.score(X_test, y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.988299475988802"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4SMmYUX4lXTc"
      },
      "source": [
        "rf_predict=rf.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oti7qDAZmYaA",
        "outputId": "99f57131-52ce-4576-def7-a55028fb527f"
      },
      "source": [
        "print(classification_report(y_test, rf_predict))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.99      0.99     27705\n",
            "           1       0.12      0.17      0.14       157\n",
            "\n",
            "    accuracy                           0.99     27862\n",
            "   macro avg       0.56      0.58      0.57     27862\n",
            "weighted avg       0.99      0.99      0.99     27862\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3poAgUNbDrJY",
        "outputId": "d0196349-05ee-4e47-e7d5-6782c7cc84af"
      },
      "source": [
        "print(\"Accuracy:\",accuracy_score(y_test, rf_predict))\n",
        "print(\"Precision:\",precision_score(y_test, rf_predict))\n",
        "print(\"Recall:\",recall_score(y_test, rf_predict))\n",
        "print(\"F1 Macro Score = {:.2f}\".format(f1_score(y_test, rf_predict, average = 'macro')))\n",
        "print(f'AUC : {roc_auc_score(y_test,rf_predict)}')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.988299475988802\n",
            "Precision: 0.1210762331838565\n",
            "Recall: 0.17197452229299362\n",
            "F1 Macro Score = 0.57\n",
            "AUC : 0.5824499935052768\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "inUPWHGzHw44",
        "outputId": "4dd49796-48c6-4c46-885b-be5509fe5436"
      },
      "source": [
        "confusion_matrix(y_test,rf_predict)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[27509,   196],\n",
              "       [  130,    27]])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttAv5x1hd2l7",
        "outputId": "dcafbb76-1b35-4cc0-e7fd-fcbde4bd234d"
      },
      "source": [
        "pip install shap"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting shap\n",
            "  Downloading shap-0.39.0.tar.gz (356 kB)\n",
            "\u001b[?25l\r\u001b[K     |█                               | 10 kB 23.6 MB/s eta 0:00:01\r\u001b[K     |█▉                              | 20 kB 30.3 MB/s eta 0:00:01\r\u001b[K     |██▊                             | 30 kB 21.2 MB/s eta 0:00:01\r\u001b[K     |███▊                            | 40 kB 17.4 MB/s eta 0:00:01\r\u001b[K     |████▋                           | 51 kB 7.5 MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 61 kB 8.7 MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 71 kB 8.1 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 81 kB 9.0 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 92 kB 9.6 MB/s eta 0:00:01\r\u001b[K     |█████████▏                      | 102 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 112 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 122 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████                    | 133 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 143 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 153 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 163 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████▋                | 174 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████▋               | 184 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████▌              | 194 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 204 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 215 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 225 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 235 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 245 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 256 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████        | 266 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 276 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 286 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 296 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 307 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 317 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▍  | 327 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 337 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 348 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 356 kB 7.3 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from shap) (1.19.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from shap) (1.4.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from shap) (0.22.2.post1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from shap) (1.1.5)\n",
            "Requirement already satisfied: tqdm>4.25.0 in /usr/local/lib/python3.7/dist-packages (from shap) (4.62.2)\n",
            "Collecting slicer==0.0.7\n",
            "  Downloading slicer-0.0.7-py3-none-any.whl (14 kB)\n",
            "Requirement already satisfied: numba in /usr/local/lib/python3.7/dist-packages (from shap) (0.51.2)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.7/dist-packages (from shap) (1.3.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba->shap) (57.4.0)\n",
            "Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba->shap) (0.34.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->shap) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->shap) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->shap) (1.15.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->shap) (1.0.1)\n",
            "Building wheels for collected packages: shap\n",
            "  Building wheel for shap (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for shap: filename=shap-0.39.0-cp37-cp37m-linux_x86_64.whl size=491650 sha256=f0055791af88de1b1b265dfd69c6d447f8bdf58cb191a9c6b2eb2f1968df91da\n",
            "  Stored in directory: /root/.cache/pip/wheels/ca/25/8f/6ae5df62c32651cd719e972e738a8aaa4a87414c4d2b14c9c0\n",
            "Successfully built shap\n",
            "Installing collected packages: slicer, shap\n",
            "Successfully installed shap-0.39.0 slicer-0.0.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5p7wZ756efZT",
        "outputId": "497b3375-f089-478c-d74c-25ad587cee82"
      },
      "source": [
        "rf.feature_importances_"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.09299283, 0.06404222, 0.09023566, 0.10048817, 0.07937671,\n",
              "       0.06239321, 0.08525207, 0.18672779, 0.05474669, 0.08531114,\n",
              "       0.04817389, 0.05025962])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "PW5aAzkrfHIb",
        "outputId": "335d6479-d171-46c3-a115-53bd61428366"
      },
      "source": [
        "feature_importance=pd.Series([0.11323443, 0.06076144, 0.06630107, 0.06386135, 0.07368524,\n",
        "       0.04935726, 0.12765492, 0.18792334, 0.11508486, 0.06895272,\n",
        "       0.03940487, 0.03377848],index=['EPS', 'Liquidity', 'Profitability', 'Productivity', 'Leverage Ratio',\n",
        "       'Asset Turnover', 'Operational Margin', 'Return on Equity',\n",
        "       'Market Book Ratio', 'Assets Growth', 'Sales Growth', 'Employee Growth'])\n",
        "feature_importance.plot(kind=\"barh\",title=\"Feature Importance\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f92461b5b50>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KWg-zWMYRo_s"
      },
      "source": [
        "Random Forest Hypertuning"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Kc5b4dNRwjl",
        "outputId": "077fa9bc-c029-4551-fbdb-548f35008591"
      },
      "source": [
        "rf_new = RandomForestClassifier(random_state=0, n_estimators=100)\n",
        "    \n",
        "rf_new.fit(X_train, y_train)\n",
        "\n",
        "y_predrh = rf_new.predict(X_test)\n",
        "\n",
        "params = {\n",
        "    'max_depth': [1,20],\n",
        "    'max_features': [1,5],\n",
        "    'min_samples_leaf': [1,5],\n",
        "    'min_samples_split': [1,5],\n",
        "    'n_estimators': [100,200]\n",
        "}\n",
        "\n",
        "cv_rf = GridSearchCV(rf, params, scoring='f1_macro', cv = 5, n_jobs = -1, verbose = 2)\n",
        "\n",
        "rf_new = cv_rf.fit(X_train, y_train)\n",
        "print(\"Best Score:\",rf_new.best_score_)\n",
        "print(\"Best Parameters:\",rf_new.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed:   50.0s\n",
            "[Parallel(n_jobs=-1)]: Done 160 out of 160 | elapsed: 31.1min finished\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9900548913662408\n",
            "{'max_depth': 20, 'max_features': 1, 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ngd4pekFeWWB",
        "outputId": "7ad92082-a427-4bb6-a12d-d3a8d21553b1"
      },
      "source": [
        "print(\"Best Score:\",rf_new.best_score_)\n",
        "print(\"Best Parameters:\",rf_new.best_params_)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Score: 0.9900548913662408\n",
            "Best Parameters: {'max_depth': 20, 'max_features': 1, 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 100}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PDTe0yPlrKrb"
      },
      "source": [
        "rf_newpredict=rf_new.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fHkpY7F-rjt_",
        "outputId": "c1a2238d-ab3b-44e5-974b-ee61ba294475"
      },
      "source": [
        "print(classification_report(y_test, rf_newpredict))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.98      0.99     27705\n",
            "           1       0.09      0.30      0.14       157\n",
            "\n",
            "    accuracy                           0.98     27862\n",
            "   macro avg       0.54      0.64      0.57     27862\n",
            "weighted avg       0.99      0.98      0.98     27862\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mQPV2zqqrqbo",
        "outputId": "2ecdf7f5-0c0e-4977-c18b-370cf41905e4"
      },
      "source": [
        "print(\"Accuracy:\",accuracy_score(y_test, rf_newpredict))\n",
        "print(\"Precision:\",precision_score(y_test, rf_newpredict))\n",
        "print(\"Recall:\",recall_score(y_test, rf_newpredict))\n",
        "print(\"F1 Macro Score = {:.2f}\".format(f1_score(y_test, y_pred, average = 'macro')))\n",
        "print(\"AUC: \" + str(roc_auc_score(y_test, rf_newpredict)))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.979649702103223\n",
            "Precision: 0.09325396825396826\n",
            "Recall: 0.29936305732484075\n",
            "F1 Macro Score = 0.48\n",
            "AUC: 0.641433919927535\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4zeueZaBJgjF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80a8b893-d1de-40f1-bcc4-397d57301b63"
      },
      "source": [
        "confusion_matrix(y_test,rf_newpredict)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[27248,   457],\n",
              "       [  110,    47]])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    }
  ]
}